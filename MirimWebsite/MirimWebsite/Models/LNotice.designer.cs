#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MirimWebsite.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Mirim2018_35")]
	public partial class LNoticeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 확장성 메서드 정의
    partial void OnCreated();
    partial void InsertTNotice(TNotice instance);
    partial void UpdateTNotice(TNotice instance);
    partial void DeleteTNotice(TNotice instance);
    #endregion
		
		public LNoticeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Mirim2018_35ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LNoticeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LNoticeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LNoticeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LNoticeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TNotice> TNotice
		{
			get
			{
				return this.GetTable<TNotice>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TNotice")]
	public partial class TNotice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _theUniqueID;
		
		private int _theNumber;
		
		private string _theTitle;
		
		private string _theContent;
		
		private string _theWriter;
		
		private System.DateTime _theDate;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntheUniqueIDChanging(int value);
    partial void OntheUniqueIDChanged();
    partial void OntheNumberChanging(int value);
    partial void OntheNumberChanged();
    partial void OntheTitleChanging(string value);
    partial void OntheTitleChanged();
    partial void OntheContentChanging(string value);
    partial void OntheContentChanged();
    partial void OntheWriterChanging(string value);
    partial void OntheWriterChanged();
    partial void OntheDateChanging(System.DateTime value);
    partial void OntheDateChanged();
    #endregion
		
		public TNotice()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theUniqueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int theUniqueID
		{
			get
			{
				return this._theUniqueID;
			}
			set
			{
				if ((this._theUniqueID != value))
				{
					this.OntheUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._theUniqueID = value;
					this.SendPropertyChanged("theUniqueID");
					this.OntheUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theNumber", DbType="Int NOT NULL")]
		public int theNumber
		{
			get
			{
				return this._theNumber;
			}
			set
			{
				if ((this._theNumber != value))
				{
					this.OntheNumberChanging(value);
					this.SendPropertyChanging();
					this._theNumber = value;
					this.SendPropertyChanged("theNumber");
					this.OntheNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theTitle", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string theTitle
		{
			get
			{
				return this._theTitle;
			}
			set
			{
				if ((this._theTitle != value))
				{
					this.OntheTitleChanging(value);
					this.SendPropertyChanging();
					this._theTitle = value;
					this.SendPropertyChanged("theTitle");
					this.OntheTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theContent", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
		public string theContent
		{
			get
			{
				return this._theContent;
			}
			set
			{
				if ((this._theContent != value))
				{
					this.OntheContentChanging(value);
					this.SendPropertyChanging();
					this._theContent = value;
					this.SendPropertyChanged("theContent");
					this.OntheContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theWriter", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string theWriter
		{
			get
			{
				return this._theWriter;
			}
			set
			{
				if ((this._theWriter != value))
				{
					this.OntheWriterChanging(value);
					this.SendPropertyChanging();
					this._theWriter = value;
					this.SendPropertyChanged("theWriter");
					this.OntheWriterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theDate", DbType="DateTime NOT NULL")]
		public System.DateTime theDate
		{
			get
			{
				return this._theDate;
			}
			set
			{
				if ((this._theDate != value))
				{
					this.OntheDateChanging(value);
					this.SendPropertyChanging();
					this._theDate = value;
					this.SendPropertyChanged("theDate");
					this.OntheDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
